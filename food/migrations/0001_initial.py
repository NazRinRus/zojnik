# Generated by Django 5.0.6 on 2024-06-07 09:54

import django.db.models.deletion
import food.models.food_details
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Antitag',
            fields=[
                ('code', models.CharField(max_length=3, primary_key=True, serialize=False, verbose_name='Код')),
                ('name', models.CharField(max_length=30, verbose_name='Название тэга')),
                ('sort', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Сортировка')),
                ('is_active', models.BooleanField(default=True, verbose_name='Тэг активен')),
            ],
            options={
                'verbose_name': 'Тэг',
                'verbose_name_plural': 'Тэги',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название блюда')),
                ('calories', models.FloatField(null=True, verbose_name='Калории')),
                ('protein', models.FloatField(null=True, verbose_name='Белки')),
                ('fat', models.FloatField(null=True, verbose_name='Жиры')),
                ('carbohydrates', models.FloatField(null=True, verbose_name='Углеводы')),
                ('allergen', models.BooleanField(default=True, verbose_name='Содержит аллергены')),
                ('other', models.TextField(null=True, verbose_name='Описание')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to=food.models.food_details.get_image_path, verbose_name='Изображение блюда')),
            ],
            options={
                'verbose_name': 'Блюдо',
                'verbose_name_plural': 'Блюда',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='FoodCategory',
            fields=[
                ('code', models.CharField(max_length=3, primary_key=True, serialize=False, verbose_name='Код')),
                ('name', models.CharField(max_length=30, verbose_name='Наименование категории')),
                ('sort', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Сортировка')),
                ('is_active', models.BooleanField(default=True, verbose_name='Категория активна')),
            ],
            options={
                'verbose_name': 'Категория блюда',
                'verbose_name_plural': 'Категории блюд',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('code', models.CharField(max_length=3, primary_key=True, serialize=False, verbose_name='Код')),
                ('name', models.CharField(max_length=30, verbose_name='Название тэга')),
                ('sort', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Сортировка')),
                ('is_active', models.BooleanField(default=True, verbose_name='Тэг активен')),
            ],
            options={
                'verbose_name': 'Тэг',
                'verbose_name_plural': 'Тэги',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='FoodAntitag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('antitag_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='antitags', to='food.antitag', verbose_name='ID тега')),
                ('food_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='foods_a', to='food.food', verbose_name='ID блюда')),
            ],
            options={
                'verbose_name': 'Сводная таблица блюда и тэга',
                'verbose_name_plural': 'Сводные таблицы блюд и тэгов',
                'ordering': ('antitag_id', 'food_id'),
            },
        ),
        migrations.AddField(
            model_name='food',
            name='antitag',
            field=models.ManyToManyField(blank=True, related_name='food_antitag', through='food.FoodAntitag', to='food.antitag'),
        ),
        migrations.AddField(
            model_name='food',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='food_category', to='food.foodcategory', verbose_name='Категория блюда'),
        ),
        migrations.CreateModel(
            name='Plate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('garnishproduct', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='plate_garnish', to='food.food', verbose_name='Гарнир')),
                ('proteinproduct', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='plate_protein', to='food.food', verbose_name='Протеиновое блюдо')),
                ('vegetableproduct', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='plate_vegetable', to='food.food', verbose_name='Овощное блюдо')),
            ],
            options={
                'verbose_name': 'Тарелка',
                'verbose_name_plural': 'Тарелки',
                'ordering': ('proteinproduct', 'garnishproduct', 'vegetableproduct'),
            },
        ),
        migrations.CreateModel(
            name='FoodTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('food_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='foods', to='food.food', verbose_name='ID блюда')),
                ('tag_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tags', to='food.tag', verbose_name='ID тега')),
            ],
            options={
                'verbose_name': 'Сводная таблица блюда и тэга',
                'verbose_name_plural': 'Сводные таблицы блюд и тэгов',
                'ordering': ('tag_id', 'food_id'),
            },
        ),
        migrations.AddField(
            model_name='food',
            name='tag',
            field=models.ManyToManyField(blank=True, related_name='food_tag', through='food.FoodTag', to='food.tag'),
        ),
    ]
